<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	맵퍼의 namespace 속성은 맵핑 구문을 그룹핑 하는 역할을 한다.
	여러 맵퍼에서 맵핑 구문의 id 속성의 값이 중복되더라도 namespace와
	맵핑 구문의 id 속성에 지정한 값을 합쳐서 호출하기 때문에 맵핑 구문이
	중복되지 않게 분류하여 관리할 수 있다.
	테이블 이름을 바탕으로 namespace를 지정하고 맵핑 구문의 id 속성의
	값은 SQL 문의 맥락에 따라서 명명하는 것이 일반적 이다.
	
	parameterType 속성에는 주로 SQL 문의 조건에 사용할 파라미터의
	데이터 타입을 지정하는 속성으로 자바 원시 타입(기본 타입, String)과 자바빈,
	Map과 같은 타입을 지정할 수 있다. resultType 속성도 parameterType
	속성에서 지정한 타입을 많이 사용한다. parameterType과 resultType에
	지정할 데이터 타입이 자바 원시 타입이면 생략가능하다.
	
	마이바티스 참고 사이트
	  - http://blog.mybatis.org/
	  - http://www.mybatis.org/mybatis-3/ko/index.html
-->
<mapper namespace="com.springstudy.blog.mappers.BlogMapper" >

	<!-- 블로그 포스트 리스트를 읽어오는 맵핑구문 -->
	<select id="postList" resultType="BlogPost" resultMap="blogPostResultMap">
		SELECT 
			*
		FROM posts
		ORDER BY post_no DESC
	</select>
	
	<!-- 카테고리 리스트를 읽어오는 맵핑구문 -->
	<select id="categoryList" resultType="Category">
		SELECT
			category_no 			categoryNo,
			category_name 		categoryName,
			description
		FROM categories;
	</select>		

	<!-- 포스트 글번호에 해당하는 포스트 하나의 정보를 읽어오는 맵핑구문 -->
	<select id="postDetail" resultType="BlogPost" resultMap="blogPostResultMap">
		SELECT 
			*
		FROM posts
		WHERE post_no = #{postNo}		
	</select>
		
	<!-- 블로그 포스트 글번호에 해당하는 댓글 리스트를 읽어오는 맵핑구문 -->
	<select id="postReplyList" resultType="PostReply">
		SELECT 
			reply_no 		replyNo,
			content,
			writer,
			reg_date 		regDate,
			post_no			postNo
		FROM post_replys
		WHERE post_no = #{postNo};
	</select>

	<!-- 카테고리에 해당하는 블로그 포스트 리스트를 읽어오는 맵핑구문 -->
	<select id="postListByCategory" resultType="BlogPost" resultMap="blogPostResultMap">
		SELECT 
			*
		FROM posts
		WHERE category_no = #{categoryNo}
		ORDER BY post_no DESC
	</select>
	
	<!-- 새로운 포스트를 테이블에 추가하는 맵핑구문 -->
	<insert id="insertPost" parameterType="BlogPost">
		INSERT INTO posts(title, writer, content, main_img, 
			file1, read_count, reg_date, mod_date, category_no)
			
		VALUES(#{title}, #{writer}, #{content}, #{mainImg},
			#{file1}, 0, SYSDATE(), SYSDATE(), #{categoryNo}) 
	</insert>
	
	<!-- post_no에 해당하는 포스트를 수정하는 맵핑구문 -->
	<update id="updatePost" parameterType="BlogPost">
		UPDATE posts
			<set>
				title=#{title},
				content=#{content},			
				<if test="mainImg != null">main_img=#{mainImg},</if>
				<if test="file1 != null">file1=#{file1},</if>
				mod_date=SYSDATE(),
				category_no=#{categoryNo}
			</set>
		WHERE post_no=#{postNo}
	</update>
	
	<delete id="deletePost">
		DELETE FROM posts 
		WHERE post_no = #{postNo}
	</delete>
	
	<resultMap id="blogPostResultMap" type="BlogPost">
		<id property="postNo" column="post_no" />
		<result property="title" column="title" />
		<result property="writer" column="writer" />
		<result property="content" column="content" />
		<result property="mainImg" column="main_img" />
		<result property="file1" column="file1" />
		<result property="readCount" column="read_count" />
		<result property="regDate" column="reg_date" />
		<result property="modDate" column="mod_date" />
		<result property="categoryNo" column="category_no" />		
	</resultMap>
</mapper>	
